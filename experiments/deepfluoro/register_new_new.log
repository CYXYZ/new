main
ckpt se3_log_map
model <bound method Module.state_dict of PoseRegressor(
  (backbone): ResNet(
    (conv1): Conv2d(1, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): GroupNorm(32, 64, eps=1e-05, affine=True)
    (act1): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): GroupNorm(32, 64, eps=1e-05, affine=True)
        (drop_block): Identity()
        (act1): ReLU(inplace=True)
        (aa): Identity()
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): GroupNorm(32, 64, eps=1e-05, affine=True)
        (act2): ReLU(inplace=True)
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): GroupNorm(32, 64, eps=1e-05, affine=True)
        (drop_block): Identity()
        (act1): ReLU(inplace=True)
        (aa): Identity()
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): GroupNorm(32, 64, eps=1e-05, affine=True)
        (act2): ReLU(inplace=True)
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): GroupNorm(32, 128, eps=1e-05, affine=True)
        (drop_block): Identity()
        (act1): ReLU(inplace=True)
        (aa): Identity()
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): GroupNorm(32, 128, eps=1e-05, affine=True)
        (act2): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): GroupNorm(32, 128, eps=1e-05, affine=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): GroupNorm(32, 128, eps=1e-05, affine=True)
        (drop_block): Identity()
        (act1): ReLU(inplace=True)
        (aa): Identity()
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): GroupNorm(32, 128, eps=1e-05, affine=True)
        (act2): ReLU(inplace=True)
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): GroupNorm(32, 256, eps=1e-05, affine=True)
        (drop_block): Identity()
        (act1): ReLU(inplace=True)
        (aa): Identity()
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): GroupNorm(32, 256, eps=1e-05, affine=True)
        (act2): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): GroupNorm(32, 256, eps=1e-05, affine=True)
        (drop_block): Identity()
        (act1): ReLU(inplace=True)
        (aa): Identity()
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): GroupNorm(32, 256, eps=1e-05, affine=True)
        (act2): ReLU(inplace=True)
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): GroupNorm(32, 512, eps=1e-05, affine=True)
        (drop_block): Identity()
        (act1): ReLU(inplace=True)
        (aa): Identity()
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): GroupNorm(32, 512, eps=1e-05, affine=True)
        (act2): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): GroupNorm(32, 512, eps=1e-05, affine=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): GroupNorm(32, 512, eps=1e-05, affine=True)
        (drop_block): Identity()
        (act1): ReLU(inplace=True)
        (aa): Identity()
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): GroupNorm(32, 512, eps=1e-05, affine=True)
        (act2): ReLU(inplace=True)
      )
    )
    (global_pool): SelectAdaptivePool2d(pool_type=avg, flatten=Flatten(start_dim=1, end_dim=-1))
    (fc): Identity()
  )
  (xyz_regression): Linear(in_features=512, out_features=3, bias=True)
  (rot_regression): Linear(in_features=512, out_features=3, bias=True)
)>
  0%|                                                                       | 0/111 [00:00<?, ?it/s]  1%|▌                                                              | 1/111 [00:32<59:11, 32.29s/it]  2%|█▏                                                             | 2/111 [01:01<54:54, 30.22s/it]  3%|█▋                                                             | 3/111 [01:32<55:04, 30.60s/it]  4%|██▎                                                            | 4/111 [02:03<55:11, 30.95s/it]  5%|██▊                                                            | 5/111 [02:35<54:59, 31.13s/it]  5%|███▍                                                           | 6/111 [03:06<54:39, 31.24s/it]  6%|███▉                                                           | 7/111 [03:37<53:55, 31.12s/it]  7%|████▌                                                          | 8/111 [04:07<53:05, 30.93s/it]  8%|█████                                                          | 9/111 [04:38<52:24, 30.83s/it]  9%|█████▌                                                        | 10/111 [05:08<51:17, 30.47s/it] 10%|██████▏                                                       | 11/111 [05:38<50:31, 30.31s/it] 11%|██████▋                                                       | 12/111 [06:08<49:56, 30.27s/it] 12%|███████▎                                                      | 13/111 [06:37<48:58, 29.98s/it] 13%|███████▊                                                      | 14/111 [07:06<48:06, 29.76s/it] 14%|████████▍                                                     | 15/111 [07:36<47:19, 29.58s/it] 14%|████████▉                                                     | 16/111 [08:05<46:42, 29.50s/it] 15%|█████████▍                                                    | 17/111 [08:35<46:21, 29.59s/it] 16%|██████████                                                    | 18/111 [09:04<45:51, 29.58s/it] 17%|██████████▌                                                   | 19/111 [09:34<45:35, 29.73s/it] 18%|███████████▏                                                  | 20/111 [10:04<44:57, 29.64s/it] 19%|███████████▋                                                  | 21/111 [10:33<44:14, 29.49s/it] 20%|████████████▎                                                 | 22/111 [11:03<43:48, 29.54s/it] 21%|████████████▊                                                 | 23/111 [11:34<44:02, 30.03s/it] 22%|█████████████▍                                                | 24/111 [12:04<43:38, 30.10s/it] 23%|█████████████▉                                                | 25/111 [12:34<42:57, 29.97s/it] 23%|██████████████▌                                               | 26/111 [13:04<42:31, 30.01s/it] 24%|███████████████                                               | 27/111 [13:34<42:19, 30.23s/it] 25%|███████████████▋                                              | 28/111 [14:06<42:14, 30.53s/it] 26%|████████████████▏                                             | 29/111 [14:38<42:19, 30.97s/it] 27%|████████████████▊                                             | 30/111 [15:08<41:20, 30.63s/it] 28%|█████████████████▎                                            | 31/111 [15:37<40:19, 30.24s/it] 29%|█████████████████▊                                            | 32/111 [16:06<39:21, 29.89s/it] 30%|██████████████████▍                                           | 33/111 [16:36<38:48, 29.86s/it] 31%|██████████████████▉                                           | 34/111 [17:06<38:17, 29.84s/it] 32%|███████████████████▌                                          | 35/111 [17:35<37:28, 29.59s/it] 32%|████████████████████                                          | 36/111 [18:03<36:28, 29.18s/it] 33%|████████████████████▋                                         | 37/111 [18:35<37:00, 30.01s/it] 34%|█████████████████████▏                                        | 38/111 [19:05<36:37, 30.11s/it] 35%|█████████████████████▊                                        | 39/111 [19:35<36:14, 30.20s/it] 36%|██████████████████████▎                                       | 40/111 [20:06<35:43, 30.19s/it] 37%|██████████████████████▉                                       | 41/111 [20:35<34:52, 29.90s/it] 38%|███████████████████████▍                                      | 42/111 [21:03<33:56, 29.51s/it] 39%|████████████████████████                                      | 43/111 [21:33<33:36, 29.65s/it] 40%|████████████████████████▌                                     | 44/111 [22:04<33:25, 29.93s/it] 41%|█████████████████████████▏                                    | 45/111 [22:34<33:03, 30.05s/it] 41%|█████████████████████████▋                                    | 46/111 [23:05<32:42, 30.19s/it] 42%|██████████████████████████▎                                   | 47/111 [23:36<32:22, 30.35s/it] 43%|██████████████████████████▊                                   | 48/111 [24:06<31:49, 30.31s/it] 44%|███████████████████████████▎                                  | 49/111 [24:36<31:09, 30.15s/it] 45%|███████████████████████████▉                                  | 50/111 [25:06<30:39, 30.15s/it] 46%|████████████████████████████▍                                 | 51/111 [25:37<30:22, 30.38s/it] 47%|█████████████████████████████                                 | 52/111 [26:06<29:30, 30.01s/it] 48%|█████████████████████████████▌                                | 53/111 [26:35<28:47, 29.78s/it] 49%|██████████████████████████████▏                               | 54/111 [27:06<28:35, 30.09s/it] 50%|██████████████████████████████▋                               | 55/111 [27:37<28:27, 30.48s/it] 50%|███████████████████████████████▎                              | 56/111 [28:07<27:49, 30.36s/it] 51%|███████████████████████████████▊                              | 57/111 [28:36<26:57, 29.94s/it] 52%|████████████████████████████████▍                             | 58/111 [29:06<26:27, 29.96s/it] 53%|████████████████████████████████▉                             | 59/111 [29:37<26:04, 30.09s/it] 54%|█████████████████████████████████▌                            | 60/111 [30:10<26:19, 30.97s/it] 55%|██████████████████████████████████                            | 61/111 [30:40<25:43, 30.88s/it] 56%|██████████████████████████████████▋                           | 62/111 [31:10<24:50, 30.42s/it] 57%|███████████████████████████████████▏                          | 63/111 [31:39<24:06, 30.13s/it] 58%|███████████████████████████████████▋                          | 64/111 [32:09<23:27, 29.95s/it] 59%|████████████████████████████████████▎                         | 65/111 [32:38<22:44, 29.66s/it] 59%|████████████████████████████████████▊                         | 66/111 [33:06<22:02, 29.39s/it] 60%|█████████████████████████████████████▍                        | 67/111 [33:37<21:45, 29.66s/it] 61%|█████████████████████████████████████▉                        | 68/111 [34:08<21:37, 30.18s/it] 62%|██████████████████████████████████████▌                       | 69/111 [34:39<21:14, 30.34s/it] 63%|███████████████████████████████████████                       | 70/111 [35:11<21:10, 30.99s/it] 64%|███████████████████████████████████████▋                      | 71/111 [35:40<20:12, 30.31s/it] 65%|████████████████████████████████████████▏                     | 72/111 [36:09<19:27, 29.94s/it] 66%|████████████████████████████████████████▊                     | 73/111 [36:38<18:47, 29.66s/it] 67%|█████████████████████████████████████████▎                    | 74/111 [37:07<18:09, 29.44s/it] 68%|█████████████████████████████████████████▉                    | 75/111 [37:36<17:37, 29.37s/it] 68%|██████████████████████████████████████████▍                   | 76/111 [38:07<17:17, 29.64s/it] 69%|███████████████████████████████████████████                   | 77/111 [38:36<16:43, 29.51s/it] 70%|███████████████████████████████████████████▌                  | 78/111 [39:04<16:06, 29.28s/it] 71%|████████████████████████████████████████████▏                 | 79/111 [39:34<15:43, 29.49s/it] 72%|████████████████████████████████████████████▋                 | 80/111 [40:04<15:17, 29.59s/it] 73%|█████████████████████████████████████████████▏                | 81/111 [40:33<14:42, 29.42s/it] 74%|█████████████████████████████████████████████▊                | 82/111 [41:02<14:04, 29.14s/it] 75%|██████████████████████████████████████████████▎               | 83/111 [41:30<13:31, 28.97s/it] 76%|██████████████████████████████████████████████▉               | 84/111 [42:00<13:06, 29.12s/it] 77%|███████████████████████████████████████████████▍              | 85/111 [42:29<12:36, 29.09s/it] 77%|████████████████████████████████████████████████              | 86/111 [42:58<12:04, 28.97s/it] 78%|████████████████████████████████████████████████▌             | 87/111 [43:26<11:31, 28.80s/it] 79%|█████████████████████████████████████████████████▏            | 88/111 [43:55<11:05, 28.93s/it] 80%|█████████████████████████████████████████████████▋            | 89/111 [44:24<10:37, 28.99s/it] 81%|██████████████████████████████████████████████████▎           | 90/111 [44:55<10:18, 29.46s/it] 82%|██████████████████████████████████████████████████▊           | 91/111 [45:25<09:53, 29.66s/it] 83%|███████████████████████████████████████████████████▍          | 92/111 [45:55<09:26, 29.82s/it] 84%|███████████████████████████████████████████████████▉          | 93/111 [46:24<08:52, 29.60s/it] 85%|████████████████████████████████████████████████████▌         | 94/111 [46:55<08:26, 29.81s/it] 86%|█████████████████████████████████████████████████████         | 95/111 [47:24<07:54, 29.69s/it] 86%|█████████████████████████████████████████████████████▌        | 96/111 [47:53<07:21, 29.43s/it] 87%|██████████████████████████████████████████████████████▏       | 97/111 [48:22<06:51, 29.41s/it] 88%|██████████████████████████████████████████████████████▋       | 98/111 [48:51<06:20, 29.25s/it] 89%|███████████████████████████████████████████████████████▎      | 99/111 [49:20<05:48, 29.03s/it] 90%|██████████████████████████████████████████████████████▉      | 100/111 [49:48<05:17, 28.91s/it] 91%|███████████████████████████████████████████████████████▌     | 101/111 [50:17<04:48, 28.83s/it] 92%|████████████████████████████████████████████████████████     | 102/111 [50:46<04:19, 28.79s/it] 93%|████████████████████████████████████████████████████████▌    | 103/111 [51:15<03:51, 28.96s/it] 94%|█████████████████████████████████████████████████████████▏   | 104/111 [51:45<03:24, 29.26s/it] 95%|█████████████████████████████████████████████████████████▋   | 105/111 [52:15<02:58, 29.67s/it] 95%|██████████████████████████████████████████████████████████▎  | 106/111 [52:44<02:26, 29.25s/it] 96%|██████████████████████████████████████████████████████████▊  | 107/111 [53:13<01:56, 29.15s/it] 97%|███████████████████████████████████████████████████████████▎ | 108/111 [53:41<01:27, 29.03s/it] 98%|███████████████████████████████████████████████████████████▉ | 109/111 [54:11<00:58, 29.20s/it] 99%|████████████████████████████████████████████████████████████▍| 110/111 [54:40<00:29, 29.06s/it]100%|█████████████████████████████████████████████████████████████| 111/111 [55:08<00:00, 28.81s/it]100%|█████████████████████████████████████████████████████████████| 111/111 [55:08<00:00, 29.81s/it]
main
ckpt se3_log_map
model <bound method Module.state_dict of PoseRegressor(
  (backbone): ResNet(
    (conv1): Conv2d(1, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): GroupNorm(32, 64, eps=1e-05, affine=True)
    (act1): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): GroupNorm(32, 64, eps=1e-05, affine=True)
        (drop_block): Identity()
        (act1): ReLU(inplace=True)
        (aa): Identity()
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): GroupNorm(32, 64, eps=1e-05, affine=True)
        (act2): ReLU(inplace=True)
      )
      (1): BasicBlock(
        (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): GroupNorm(32, 64, eps=1e-05, affine=True)
        (drop_block): Identity()
        (act1): ReLU(inplace=True)
        (aa): Identity()
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): GroupNorm(32, 64, eps=1e-05, affine=True)
        (act2): ReLU(inplace=True)
      )
    )
    (layer2): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): GroupNorm(32, 128, eps=1e-05, affine=True)
        (drop_block): Identity()
        (act1): ReLU(inplace=True)
        (aa): Identity()
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): GroupNorm(32, 128, eps=1e-05, affine=True)
        (act2): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): GroupNorm(32, 128, eps=1e-05, affine=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): GroupNorm(32, 128, eps=1e-05, affine=True)
        (drop_block): Identity()
        (act1): ReLU(inplace=True)
        (aa): Identity()
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): GroupNorm(32, 128, eps=1e-05, affine=True)
        (act2): ReLU(inplace=True)
      )
    )
    (layer3): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): GroupNorm(32, 256, eps=1e-05, affine=True)
        (drop_block): Identity()
        (act1): ReLU(inplace=True)
        (aa): Identity()
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): GroupNorm(32, 256, eps=1e-05, affine=True)
        (act2): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): GroupNorm(32, 256, eps=1e-05, affine=True)
        (drop_block): Identity()
        (act1): ReLU(inplace=True)
        (aa): Identity()
        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): GroupNorm(32, 256, eps=1e-05, affine=True)
        (act2): ReLU(inplace=True)
      )
    )
    (layer4): Sequential(
      (0): BasicBlock(
        (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): GroupNorm(32, 512, eps=1e-05, affine=True)
        (drop_block): Identity()
        (act1): ReLU(inplace=True)
        (aa): Identity()
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): GroupNorm(32, 512, eps=1e-05, affine=True)
        (act2): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): GroupNorm(32, 512, eps=1e-05, affine=True)
        )
      )
      (1): BasicBlock(
        (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn1): GroupNorm(32, 512, eps=1e-05, affine=True)
        (drop_block): Identity()
        (act1): ReLU(inplace=True)
        (aa): Identity()
        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): GroupNorm(32, 512, eps=1e-05, affine=True)
        (act2): ReLU(inplace=True)
      )
    )
    (global_pool): SelectAdaptivePool2d(pool_type=avg, flatten=Flatten(start_dim=1, end_dim=-1))
    (fc): Identity()
  )
  (xyz_regression): Linear(in_features=512, out_features=3, bias=True)
  (rot_regression): Linear(in_features=512, out_features=3, bias=True)
)>
  0%|                                                                       | 0/111 [00:00<?, ?it/s]  0%|                                                                       | 0/111 [00:00<?, ?it/s]
Traceback (most recent call last):
  File "/home/data/cyx/autodl-tmp/DiffPose_copy/experiments/deepfluoro/register.py", line 323, in <module>
    main(id_number, parameterization=parameterization)
  File "/home/data/cyx/autodl-tmp/DiffPose_copy/experiments/deepfluoro/register.py", line 289, in main
    df = registration.run(idx)
         ^^^^^^^^^^^^^^^^^^^^^
  File "/home/data/cyx/autodl-tmp/DiffPose_copy/experiments/deepfluoro/register.py", line 137, in run
    registration = self.initialize_registration(img)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/data/cyx/autodl-tmp/DiffPose_copy/experiments/deepfluoro/register.py", line 82, in initialize_registration
    return SparseRegistration(
           ^^^^^^^^^^^^^^^^^^^
  File "/home/data/cyx/miniconda3/envs/diffpose_copy/lib/python3.12/site-packages/diffpose/registration.py", line 110, in __init__
    rotation, translation = pose.convert(parameterization)
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/data/cyx/miniconda3/envs/diffpose_copy/lib/python3.12/site-packages/diffdrr/pose.py", line 52, in convert
    rotation = matrix_to_euler_angles(self.matrix[..., :3, :3], convention)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/data/cyx/miniconda3/envs/diffpose_copy/lib/python3.12/site-packages/diffdrr/pose.py", line 469, in matrix_to_euler_angles
    if len(convention) != 3:
       ^^^^^^^^^^^^^^^
TypeError: object of type 'NoneType' has no len()
